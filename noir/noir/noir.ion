#foreign(header = "SDL.h", source = "noir_impl.c")

import libc {sprintf, printf, fmodf, cosf}

struct int2 {
    x, y: int;
}

func int2_eq(a: int2, b: int2): bool {
    return a.x == b.x && a.y == b.y;
}

struct float2 {
    x, y: float;
}

struct DigitalButton {
    down: bool;
    pressed: int;
    released: int;
}

func reset_digital_button_events(button: DigitalButton*) {
    button.pressed = 0;
    button.released = 0;
}

func update_digital_button(button: DigitalButton*, down: bool) {
    was_down := button.down;
    button.down = down;
    button.pressed += down && !was_down;
    button.released += !down && was_down;
}

enum Key {
    KEY_LSHIFT = 256,
    KEY_RSHIFT,
    KEY_SHIFT,
    KEY_LCTRL,
    KEY_RCTRL,
    KEY_CTRL,
    KEY_LALT,
    KEY_RALT,
    KEY_ALT,
    KEY_CAPS,
    KEY_RETURN,
    KEY_SPACE,
    KEY_BACKSPACE,
    KEY_ESCAPE,
    KEY_TAB,
    KEY_LEFT,
    KEY_RIGHT,
    KEY_UP,
    KEY_DOWN,
    NUM_KEYS,
}

const MAX_TEXT = 1024;
const MAX_ERROR = 256;
const MAX_TITLE = 256;

struct Time {
    delta_ticks: int;
    delta_nsecs: int;
    delta_usecs: int;
    delta_msecs: int;
    delta_secs: float;
    
    ticks: uint64;
    nsecs: uint64;
    usecs: uint64;
    msecs: uint64;
    secs: double;

    ticks_per_sec: uint64;

    sdl_start_ticks: uint64;
}

struct Mouse {
    moved: bool;
    pos: int2;
    delta_pos: int2;

    global_moved: bool;
    global_pos: int2;
    global_delta_pos: int2;

    left_button: DigitalButton;
    middle_button: DigitalButton;
    right_button: DigitalButton;
    capture: bool;

    synced_capture: bool;
    synced_pos: int2;
    synced_global_pos: int2;
}

struct Audio {
    valid: bool;
    rate: int;
    channels: int;

    play: bool;
    callback: func(context: void*, frames: float2*, num_frames: int);
    context: void*;

    synced_play: bool;

    sdl_device: int;
}

@foreign
struct SDL_Window;

struct Window {
    resizable: bool;
    hidden: bool;
    fullscreen: bool;

    title: char const*;
    pos: int2;
    size: int2;
    moved: bool;
    resized: bool;

    synced_title: char[MAX_TITLE];
    synced_pos: int2;
    synced_size: int2;
    synced_resizable: bool;
    synced_hidden: bool;
    synced_fullscreen: bool;

    sdl: SDL_Window*;
}

struct Display {
    size: int2;
    rate: int;
    dpi: float;
}

enum MouseButton {
    MOUSE_BUTTON_NONE,
    MOUSE_BUTTON_LEFT,
    MOUSE_BUTTON_MIDDLE,
    MOUSE_BUTTON_RIGHT,
}

enum EventKind {
    EVENT_NONE,
    EVENT_KEY_DOWN,
    EVENT_KEY_UP,
    EVENT_MOUSE_BUTTON_DOWN,
    EVENT_MOUSE_BUTTON_UP,
    EVENT_MOUSE_MOVE,
}

struct KeyEvent {
    key: int;
    repeat: bool;
}

struct MouseButtonEvent {
    button: MouseButton;
    pos: int2;
}

struct MouseMoveEvent {
    pos: int2;
    delta_pos: int2;
}

union EventData {
    key: KeyEvent;
    mouse_button: MouseButtonEvent;
    mouse_move: MouseMoveEvent;
}

struct Event {
    kind: EventKind;
    data: EventData;
}

const MAX_EVENTS = 256;

struct App {
    init: bool;
    quit: bool;
    num_updates: int;
    error: char const*;
    error_buf: char[MAX_ERROR];
    events: Event[MAX_EVENTS];
    num_events: int;

    platform: char const*;
    clipboard: char const*;
    display: Display;
    window: Window;
    keys: DigitalButton[NUM_KEYS];
    mouse: Mouse;
    text: char[MAX_TEXT];
    time: Time;
    audio: Audio;

    synced_clipboard: char*;
}

var default_window_title = "Noir";
var default_window_size = int2{800, 600};

const DEFAULT_WINDOW_POS = 1 << 31;

var app: App = {window = {pos = {DEFAULT_WINDOW_POS , DEFAULT_WINDOW_POS}}};

func update_combination_key(dest_key: int, src_key1: int, src_key2: int) {
    update_digital_button(&app.keys[dest_key], app.keys[src_key1].down || app.keys[src_key2].down);
}

func update_combination_keys() {
    update_combination_key(KEY_SHIFT, KEY_LSHIFT, KEY_RSHIFT);
    update_combination_key(KEY_CTRL, KEY_LCTRL, KEY_RCTRL);
    update_combination_key(KEY_ALT, KEY_LALT, KEY_RALT);
}

func push_event(kind: EventKind, data: EventData) {
    if (app.num_events == MAX_EVENTS) {
        app.error = "Event queue overflow";
        return;
    }
    app.events[app.num_events++] = Event{kind = kind, data = data};
}

func app_init(): bool;

func app_update(): bool;

// Test program

const PI = 3.14159265358979323846264338327950288;
const PI2 = PI + PI;

var osc1_freq: float = 440;
var osc1_amp: float = 0.1;
var osc1_phase: float;

var osc2_freq: float = 330;
var osc2_amp: float = 1.0;
var osc2_phase: float = 0.0;

var mix_gain = 1.0;

func audio_callback(context: void*, frames: float2*, num_frames: int) {
    delta_osc1_phase := PI2 * osc1_freq / app.audio.rate;
    delta_osc2_phase := PI2 * osc2_freq / app.audio.rate;
    for (i := 0; i < num_frames; i++) {
        val := osc1_amp * cosf(osc1_phase + osc2_amp * cosf(osc2_phase));
        // val := osc1_amp * cosf(osc1_phase) * osc2_amp * cosf(osc2_phase);
        // val := osc1_amp * cosf(osc1_phase) + osc2_amp * cosf(osc2_phase);
        val *= mix_gain;
        frames[i].x = val;
        frames[i].y = val;
        osc1_phase += delta_osc1_phase;
        osc2_phase += delta_osc2_phase;
    }
    osc1_phase = fmodf(osc1_phase, PI2);
    osc2_phase = fmodf(osc2_phase, PI2);
}

func print_and_clear_error() {
    if (app.error) {
        printf("Error: %s\n", app.error);
        app.error = NULL;
    }
}

func print_events() {
    for (i := 0; i < app.num_events; i++) {
        event := app.events[i];
        switch (event.kind) {
        case EVENT_KEY_DOWN:
            data := event.data.key;
            printf("EVENT_KEY_DOWN: %d\n", data.key);
        case EVENT_KEY_UP:
            data := event.data.key;
            printf("EVENT_KEY_UP: %d\n", data.key);
        case EVENT_MOUSE_BUTTON_DOWN:
            data := event.data.mouse_button;
            printf("EVENT_MOUSE_BUTTON_DOWN: %d, (%d, %d)\n", data.button, data.pos.x, data.pos.y);
        case EVENT_MOUSE_BUTTON_UP:
            data := event.data.mouse_button;
            printf("EVENT_MOUSE_BUTTON_UP: %d, (%d, %d)\n", data.button, data.pos.x, data.pos.y);
        case EVENT_MOUSE_MOVE:
            data := event.data.mouse_move;
            printf("EVENT_MOUSE_MOVE: (%d, %d), (%d, %d)\n", data.pos.x, data.pos.y, data.delta_pos.x, data.delta_pos.y);
        }
    }
}

func main(argc: int, argv: char**): int {
    app.audio.callback = audio_callback;
    if (!app_init()) {
        print_and_clear_error();
        return 1;
    }
    printf("Platform: %s\n", app.platform);
    printf("Display: %d x %d, %d Hz, %.2f DPI\n", app.display.size.x, app.display.size.y, app.display.rate, app.display.dpi);
    title_count := 0;
    title_buf: char[16];
    show_time_msecs: uint64 = 0;
    print_events_enabled := false;
    while (app_update()) {
        if (app.error) {
            print_and_clear_error();
        }
        if (print_events_enabled) {
            print_events();
        }
        // printf("Mouse = (%d, %d)\n", app.mouse.pos.x, app.mouse.pos.y);
        // printf("Time: %fs\n", app.time.secs);
        // printf("Delta time: %fs\n", app.time.delta_secs);
        if (app.mouse.moved) {
            printf("Mouse move: (%d, %d)\n", app.mouse.delta_pos.x, app.mouse.delta_pos.y);
        }
        if (app.mouse.global_moved) {
            printf("Global mouse move: (%d, %d)\n", app.mouse.global_delta_pos.x, app.mouse.global_delta_pos.y);
        }
        if (app.window.moved) {
            printf("Window moved: (%d, %d)\n", app.window.pos.x, app.window.pos.y);
        }
        if (app.window.resized) {
            printf("Window resized: (%d, %d)\n", app.window.size.x, app.window.size.y);
        }
        if (*app.text) {
            printf("Text: %s\n", app.text);
        }
        if (app.mouse.left_button.pressed) {
            printf("Left mouse button pressed\n");
        }
        if (app.mouse.left_button.released) {
            printf("Left mouse button released\n");
        }
        lshift := app.keys[KEY_LSHIFT];
        if (lshift.pressed) {
            printf("Left shift pressed\n");
        }
        if (lshift.released) {
            printf("Left shift released\n");
        }
        rshift := app.keys[KEY_RSHIFT];
        if (rshift.pressed) {
            printf("Right shift pressed\n");
        }
        if (rshift.released) {
            printf("Right shift released\n");
        }
        shift := app.keys[KEY_SHIFT];
        alt := app.keys[KEY_ALT];
        ctrl := app.keys[KEY_CTRL];
        if (shift.pressed) {
            printf("Shift pressed\n");
        }
        if (shift.released) {
            printf("Shift released\n");
        }
        if (app.keys[KEY_ESCAPE].pressed) {
            app.quit = true;
        }
        if (app.keys['e'].pressed) {
            print_events_enabled = !print_events_enabled;
        }
        if (app.keys['p'].pressed) {
            app.audio.play = !app.audio.play;
            printf("%s audio\n", app.audio.play ? "Playing" : "Pausing");
        }
        if (alt.down && app.keys[KEY_RETURN].pressed) {
            printf("Toggling full screen\n");
            app.window.fullscreen = !app.window.fullscreen;
        }
        if (app.keys['t'].pressed) {
            printf("Changing title\n");
            title_count++;
            sprintf(title_buf, "Title %d", title_count);
            app.window.title = title_buf;
        }
        if (app.keys['a'].pressed) {
            printf("Copying title to clipboard\n");
            app.clipboard = app.window.title;
        }
        if (app.keys['b'].pressed) {
            printf("Copying clipboard to title\n");
            app.window.title = app.clipboard;
        }
        if (app.keys['c'].pressed) {
            app.mouse.capture = !app.mouse.capture;
            printf("Mouse capture %s\n", app.mouse.capture ? "enabled" : "disabled");
        }
        if (app.keys['r'].pressed) {
            app.window.resizable = !app.window.resizable;
            printf("Window resizing %s\n", app.window.resizable ? "enabled" : "disabled");
        }
        if (app.keys['h'].pressed) {
            app.window.hidden = true;
            show_time_msecs = app.time.msecs + 1000;
            printf("Window hidden\n");
        }
        if (app.window.hidden && app.time.msecs >= show_time_msecs) {
            app.window.hidden = false;
            printf("Window shown\n");
        }
        if (app.keys['j'].down) {
            if (shift.down) {
                osc2_freq -= 100 * app.time.delta_secs;
            } else {
                osc1_freq -= 100 * app.time.delta_secs;
            }
        }
        if (app.keys['l'].down) {
            if (shift.down) {
                osc2_freq += 100 * app.time.delta_secs;
            } else {
                osc1_freq += 100 * app.time.delta_secs;
            }
        }
        if (app.keys['i'].down) {
            if (shift.down) {
                osc2_amp += 0.1 * app.time.delta_secs;
            } else {
                osc1_amp += 0.03 * app.time.delta_secs;
            }
        }
        if (app.keys['k'].down) {
            if (shift.down) {
                osc2_amp -= 0.1 * app.time.delta_secs;
            } else {
                osc1_amp -= 0.03 * app.time.delta_secs;
            }
        }
        dest := &app.window.pos;
        if (shift.down) {
            dest = &app.mouse.global_pos;
        } else if (ctrl.down) {
            dest = &app.window.size;
        }
        if (app.keys[KEY_LEFT].pressed) {
            dest.x -= 100;
        }
        if (app.keys[KEY_RIGHT].pressed) {
            dest.x += 100;
        }
        if (app.keys[KEY_UP].pressed) {
            dest.y -= 100;
        }
        if (app.keys[KEY_DOWN].pressed) {
            dest.y += 100;
        }
    }
    if (app.error) {
        print_and_clear_error();
    }
    return 0;
}
